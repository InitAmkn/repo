/*
## Двумерные массивы
48. Показать двумерный массив размером m×n заполненный целыми числами
49. Показать двумерный массив размером m×n заполненный вещественными числами
50. В двумерном массиве n×k заменить четные элементы на противоположные
*/


/*
51. Задать двумерный массив следующим правилом: Aₘₙ = m+n
52. В двумерном массиве заменить элементы, у которых оба индекса чётные на их квадраты
53. В двумерном массиве показать позиции числа, заданного пользователем или указать, что такого элемента нет
54. В матрице чисел найти сумму элементов главной диагонали
55. Дан целочисленный массив. Найти среднее арифметическое каждого из столбцов.
56. Написать программу, которая обменивает элементы первой строки и последней строки
57. Написать программу, упорядочивания по убыванию элементы каждой строки двумерной массива.
58. Написать программу, которая в двумерном массиве заменяет строки на столбцы или сообщить, что это невозможно (в случае, если матрица не квадратная).

59. В прямоугольной матрице найти строку с наименьшей суммой элементов.
*/


int minSum(int[,] matrix)
{

    int[] sum = new int[matrix.GetLength(0)];
    int indexMinSum = 0;

    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            sum[i] = sum[i] + matrix[i, j];
        }
    }
    int minSum = sum[0];

    for (int i = 1; i < sum.Length; i++)
    {
        if (minSum > sum[i])
        {
            minSum = sum[i];
            indexMinSum = i;
        }
    }

    return indexMinSum;
}


/*
60. Составить частотный словарь элементов двумерного массива
Частотный словарь содержит информацию о том, сколько раз встречается элемент входных данных.

Пример: 
Есть набор данных 

```
{ 1, 9, 9, 0, 2, 8, 0, 9 }
```
частотный массив может быть представлен так:
```
0 встречается 2 раза
1 встречается 1 раз
2 встречается 1 раз
8 встречается 1 раз
9 встречается 3 раза
```
Если набор данных - таблица
```
1, 2, 3
4, 6, 1
2, 1, 6
```
на выходе ожидаем получить
```
1 встречается 3 раза
2 встречается 2 раз
3 встречается 1 раз
4 встречается 1 раз
6 встречается 2 раза
```
Пример частотного массива для текстовых данных:
Входные данные:

_Частотный анализ – это один из методов криптоанализа, основывающийся на предположении о существовании нетривиального статистического распределения отдельных символов и их последовательностей как в открытом тексте, так и шифрованном тексте, которое с точностью до замены символов будет сохраняться в процессе шифрования и дешифрования._

Частотный анализ может выглядеть так
```
Символ пробел/space встречается 41 раз. Частота 12.28%
Символ о встречается 38 раз.  Частота 11.38%
Символ и встречается 26 раз.  Частота 7.78%
Символ т встречается 25 раз.  Частота 7.49%
Символ е встречается 23 раза. Частота 6.89%
Символ с встречается 21 раз.  Частота 6.29%
Символ н встречается 20 раз.  Частота 5.99%
Символ а встречается 20 раз.  Частота 5.99%
Символ в встречается 16 раз.  Частота 4.79%
Символ р встречается 12 раз.  Частота 3.59%
Символ л встречается 10 раз.  Частота 2.99%
Символ к встречается 9 раз.   Частота 2.69%
Символ д встречается 9 раз.   Частота 2.69%
Символ п встречается 6 раз.   Частота 1.80%
Символ я встречается 6 раз.   Частота 1.80%
Символ м встречается 6 раз.   Частота 1.80%
Символ ь встречается 5 раз.   Частота 1.50%
Символ ы встречается 5 раз.   Частота 1.50%
Символ з встречается 4 раза.  Частота 1.20%
Символ х встречается 3 раза.  Частота 0.90%
Символ ш встречается 3 раза.  Частота 0.90%
Символ ф встречается 3 раза.  Частота 0.90%
Символ ч встречается 3 раза.  Частота 0.90%
Символ й встречается 3 раза.  Частота 0.90%
Символ , встречается 3 раза.  Частота 0.90%
Символ щ встречается 2 раза.  Частота 0.60%
Символ ю встречается 2 раза.  Частота 0.60%
Символ у встречается 2 раза.  Частота 0.60%
Символ г встречается 2 раза.  Частота 0.60%
Символ ж встречается 1 раз.   Частота 0.30%
Символ э встречается 1 раз.   Частота 0.30%
Символ – встречается 1 раз.   Частота 0.30%
Символ б встречается 1 раз.   Частота 0.30%
Символ ц встречается 1 раз.   Частота 0.30%
Символ . встречается 1 раз.   Частота 0.30%
```
[url](https://abakbot.ru/online-5/97-freq-letter "источник")

61. Найти произведение двух матриц
62. В двумерном массиве целых чисел. Удалить строку и столбец, 
на пересечении которых расположен наименьший элемент.
*/


int[,] matrix1 = GenRandMatrix(5, 5);

PrintMatrix(matrix1);
//Console.WriteLine(minSum(matrix1));

PrintMatrix(MatrixDelMin(matrix1));


int[,] MatrixDelMin(int[,] matrix)
{

    int min = matrix[0, 0];
    int IndexMinI = 0;
    int IndexMinJ = 0;
    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            if (min > matrix[i, j])
            {
                min = matrix[i, j];
                IndexMinI = i;
                IndexMinJ = j;
            }
        }
    }
    Console.WriteLine("мин элемент: " + matrix[IndexMinI, IndexMinJ]);

    int[,] matrixDelMin = new int[matrix.GetLength(0) - 1, matrix.GetLength(1) - 1];
    int iM = 0, jM = 0;
    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        if (i != IndexMinI) iM = i;
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                if (j != IndexMinJ) jM = j;
                matrixDelMin[iM, jM] = matrix[i, j];
            }
        }
    }
    return matrixDelMin;
}


int[,] GenRandMatrix(int x, int y)
{
    int[,] matrix1 = new int[x, y];
    int im = 0, jm = 0;
    for (int i = 0; i < matrix1.GetLength(0); i++)
    {
        for (int j = 0; j < matrix1.GetLength(1); j++)
        {
            matrix1[i, j] = new Random().Next(0, 10);
        }
    }
    return matrix1;
}
void PrintMatrix(int[,] matrix)
{

    for (int i = 0; i < matrix.GetLength(0); i++)
    {
        for (int j = 0; j < matrix.GetLength(1); j++)
        {
            Console.Write($"{matrix[i, j]} ");
        }
        Console.WriteLine();
    }

}



/*
63. Сформировать трехмерный массив не повторяющимися двузначными числами показать его построчно на экран выводя индексы соответствующего элемента
64. Показать треугольник Паскаля
*Сделать вывод в виде равнобедренного треугольника
65. Спирально заполнить двумерный массив:
```
  1  2  3  4
 12 13 14  5
 11 16 15  6
 10  9  8  7 
 */
